// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id         	String @id @unique @default(cuid())
	username   	String @unique
	email      	String @unique
	password   	String
	avatarId   	String?
	role       	Role
	spaces     	Space[]
	avatar     	Avatar? @relation(fields: [avatarId], references: [id])
	spaceJoined	spaceJoinedUsers[]
	meetings		meeting[]
}

model Space {
	id            String @id @unique @default(cuid())
	name          String
	dimensions    String?
	mapId		  		String?
	thumbnail     String
	creatorId     String
	creator       User    @relation(fields: [creatorId], references: [id])
	spaceElements spaceElements[]
	map			  		Map?    @relation(fields: [mapId], references: [id])
	joinedUser		spaceJoinedUsers[]
	meetings			meeting[]	
}

model spaceJoinedUsers {
	id						String @id @unique @default(cuid())
	spaceId				String
	space					Space @relation(fields: [spaceId], references: [id])
	userId				String
	user 					User	@relation(fields: [userId], references: [id])
	date					DateTime
	@@unique([spaceId, userId])	
}

model meeting {
	id 					String @id @unique @default(cuid())
	name				String
	ownerId			String
	owner				User @relation(fields: [ownerId], references: [id])
	spaceId			String
	space				Space @relation(fields: [spaceId], references: [id])
	date				DateTime
}

model spaceElements {
	id         String @id @unique @default(cuid())
	elementId  String
	spaceId    String
	x          Int
	y          Int
	depth			 Int
	space      Space   @relation(fields: [spaceId], references: [id])
	element    Element @relation(fields: [elementId], references: [id])
}

model Element {
	id          String @id @unique @default(cuid())
	name        String
	height      Int
	width       Int
	ImageUrl    String
	isStatic    Boolean
	depth				Int
	spaces      spaceElements[]
	mapElements MapElements[]
}

model Map {
	id         String @id @unique @default(cuid())
	name       String
	thumbnail  String
	dimensions String
  elements   MapElements[]
	spaces	   Space[]
}

model Avatar {
	id         String @id @unique @default(cuid())
	name       String
	imageUrl   String
  user       User[]
}

model MapElements {
	id         String @id @unique @default(cuid())
	elementId  String
	mapId      String
	x          Int
	y          Int
	depth 		 Int
	element    Element @relation(fields: [elementId], references: [id])
	map        Map @relation(fields: [mapId], references: [id])
}

enum Role {
	Admin
	User
}
